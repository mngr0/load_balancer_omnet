#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Web Server Load Balancing - Simulazione di sistemi
\end_layout

\begin_layout Section
Introduzione
\end_layout

\begin_layout Standard
Durante gli ultimi anni i servizi basati sul Web, in particolare l' E-Commerce,
 sono diventati sempre più popolari.
 In molte occasioni questo porta a tempi di risposta inaccettabili o disservizi,
 causando la perdita di potenziali clienti.
\end_layout

\begin_layout Standard
To complicate things further, the traffic may change with the time of the
 day, the day of the week, or even the month of the year.
 These seasonal or periodic fluc- tuations make it even more difficult to
 plan for adequate capacity for a site.
 There are several possible solutions to this issue, such as adding powerful
 servers, caching, or outsourcing (Derfler and Freed, 2000).
 However, these methods of load management have their own problems.
 For example, a more powerful server may work for a while, but it is not
 scalable and could cause interruption due to server upgrade and maintenance.
 Besides, if the server capacity is planned based on the peak load, then
 the extra capacity is wasted during the off-peak hours.
 A realistic and effective way is to use multiple Web servers also called
 ‘‘clustered Web servers’’ or ‘‘server farm’’ and balance the load among
 these servers.
 In order to address the network latency delays caused over greater distances,
 many organizations are also deploying multiple (distributed) Web servers
 in disparate cities, states, and even countries.
 User service requests are routed to a server based on some routing algorithms.
 Of course, the system performance depends critically on these routing algorithm
s.
 This method of load manage- ment has been shown to improve QoS in practice
 and is widely used (Derfler and Freed, 2000).
 One big advan- tage of using multiple servers is that one need not develop
 very accurate plans for the server capacity; one can add to the existing
 capacity in an ad-hoc fashion by either buying new servers or by employing
 unused capacity from elsewhere.
\end_layout

\begin_layout Standard
In this paper, we develop a queueing model to quantitatively analyze the
 performance characteristics of dif- ferent routing policies for a clustered
 Web servers.
 The main practical contribution of this paper is that it pro- vides network
 administrators guidelines on how to configure the server farm to achieve
 maximum efficiency.
 The main theoretical contributions of this paper are twofold.
 First, we obtain performance measures (e.g., joint probability distribution,
 average waiting time, rejection rate) for the shortest-queue load balancing
 with finite buffer capacity and compare them with the random routing and
 the round-robin policy.
 Second, we extend our analysis to the distributed load balancing which
 could re-route traffic from heavy-loaded regions to light-loaded ones.
 We consider the proximity which is measured by the network delay due to
 re-routing, and find the optimal routing policy that minimizes the average
 response time.
\end_layout

\begin_layout Section
Modello 
\end_layout

\begin_layout Subsection
Routing centralizzato
\end_layout

\begin_layout Subsection
Routing distribuito
\end_layout

\begin_layout Section
Implementazione
\end_layout

\begin_layout Subsection
Omnet++
\end_layout

\begin_layout Subsection
RouterWithStrategies
\end_layout

\begin_layout Subsection
RouterDistributed
\end_layout

\begin_layout Section
Analisi dei dati
\end_layout

\begin_layout Subsection
Transiente
\end_layout

\begin_layout Subsection
Intervalli di confidenza
\end_layout

\begin_layout Subsection
Stima puntuale
\end_layout

\begin_layout Subsection
Grafici prodotti
\end_layout

\begin_layout Section
Conclusione
\end_layout

\begin_layout Section
Appendice
\end_layout

\begin_layout Subsection
Parametri della simulazione
\end_layout

\end_body
\end_document
